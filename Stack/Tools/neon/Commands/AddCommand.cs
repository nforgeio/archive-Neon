//-----------------------------------------------------------------------------
// FILE:	    AddCommand.cs
// CONTRIBUTOR: Jeff Lill
// COPYRIGHT:	Copyright (c) 2016-2017 by Neon Research, LLC.  All rights reserved.

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

using Newtonsoft;
using Newtonsoft.Json;

using Neon.Cluster;
using Neon.Stack.Common;

namespace NeonCluster
{
    /// <summary>
    /// Implements the <b>add</b> command.
    /// </summary>
    public class AddCommand : ICommand
    {
        private const string usage = @"
Adds the administration information for a cluster to the local computer.
This is a JSON file generated by [neon setup] that includes the cluster
definition as well as the cluster's secrets.

USAGE:

    neon add CLUSTER-ADMIN

ARGUMENTS:

    CLUSTER-ADMIN   - Path the the cluster admin file.
";

        /// <inheritdoc/>
        public string[] Words
        {
            get { return new string[] { "add" }; }
        }

        /// <inheritdoc/>
        public string[] ExtendedOptions
        {
            get { return new string[0]; }
        }

        /// <inheritdoc/>
        public bool NeedsSshCredentials
        {
            get { return false; }
        }

        /// <inheritdoc/>
        public bool IsPassThru
        {
            get { return false; }
        }

        /// <inheritdoc/>
        public void Help()
        {
            Console.WriteLine(usage);
        }

        /// <inheritdoc/>
        public void Run(CommandLine commandLine)
        {
            if (commandLine.Arguments.Length < 1)
            {
                Console.Error.WriteLine("*** ERROR: CLUSTER-ADMIN is required.");
                Program.Exit(1);
            }

            var clusterSecrets     = NeonHelper.JsonDeserialize<ClusterSecrets>(File.ReadAllText(commandLine.Arguments[0]));
            var clusterSecretsPath = Program.GetClusterSecretsPath(clusterSecrets.Name);
            var exists             = File.Exists(clusterSecretsPath);

            File.WriteAllText(clusterSecretsPath, NeonHelper.JsonSerialize(clusterSecrets, Formatting.Indented));

            if (exists)
            {
                Console.WriteLine($"*** Updated [{clusterSecrets.Name}].");
            }
            else
            {
                Console.WriteLine($"*** Added [{clusterSecrets.Name}].");
            }
        }
    }
}

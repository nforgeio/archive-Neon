#!/bin/bash
#------------------------------------------------------------------------------
# FILE:         setup-docker.sh
# CONTRIBUTOR:  Jeff Lill
# COPYRIGHT:    Copyright (c) 2016-2017 by Neon Research, LLC.  All rights reserved.
#
# NOTE: This script must be run under [sudo].
#
# NOTE: Variables formatted like $<name> will be expanded by [node-conf]
#       using a [PreprocessReader].
#
# This script handles the installation of the Docker CLI.

# Configure Bash strict mode so that the entire script will fail if 
# any of the commands fail.
#
#       http://redsymbol.net/articles/unofficial-bash-strict-mode/

set -euo pipefail

echo
echo "**********************************************" 1>&2
echo "** SETUP-DOCKER                             **" 1>&2
echo "**********************************************" 1>&2

# Load the cluster configuration and setup utilities.

. $<load-cluster-config>
. setup-utility.sh

# Ensure that setup is idempotent.

startsetup setup-docker

# Note we're going to delete the docker unique key file if present.  Docker will
# generate a unique key the first time it starts.  It's possible that a key
# might be left over if the OS image was cloned.  Docker Swarm won't schedule
# containers on nodes with duplicate keys.

rm -f /etc/docker/key.json

#--------------------------------------------------------------------------
# Install Docker
#
#   https://docs.docker.com/engine/installation/linux/ubuntulinux/
#
# Note that NEON_DOCKER_VERSION can be set to [latest] (the default),
# [test], [experimental], [development] or a version number like [1.12.0].
#
# [latest], [test], and [experimental] install the current published
# releases as described at https://github.com/docker/docker/releases
# using the standard Docker setup scripts.
#
# Specifying a straight version number like [1.12.0] installs a specific
# binary from https://get.docker.com/builds/Linux/x86_64/docker-1.12.0.tgz
# as described here:
#
#   https://docs.docker.com/engine/installation/binaries/
#
# You can also specify the HTTP/HTTPS URI to the binary package to be installed.
# This is useful for installing a custom build or a development snapshot copied 
# from https://master.dockerproject.org/.  Be sure to copy the TAR file from:
#
#       linux/amd64/docker-<docker-version>-dev.tgz

# IMPORTANT!
#
# Production clusters should install Docker with a specific version number
# to ensure that you'll be able to deploy additional hosts with the
# same Docker release as the rest of the cluster.  This also prevents 
# the package manager from inadvertently upgrading Docker.

binary_uri=

case "${NEON_DOCKER_VERSION}" in

test)

    curl -fsSLv ${CURL_RETRY} https://test.docker.com/ | sh 1>&2
    touch ${NEON_STATE_FOLDER}/docker-test-build
    ;;

experimental)

    curl -fsSLv ${CURL_RETRY} https://experimental.docker.com/ | sh 1>&2
    touch ${NEON_STATE_FOLDER}/docker-experimental-build
    ;;

latest)
    # Install the latest production release from binaries further below.    

    binary_uri=https://get.docker.com/builds/Linux/x86_64/docker-latest.tgz
    ;;

http*)
    # NEON_DOCKER_VERSION is actually the URI for the binary and
    # perform the actual installation below.
    
    binary_uri=${NEON_DOCKER_VERSION}
    ;;

*)
    # Specific Docker version requested.  We'll set ${binary_uri}
    # to the URI for binary and perform the actual installation below.

    binary_uri="https://get.docker.com/builds/Linux/x86_64/docker-${NEON_DOCKER_VERSION}.tgz"
    ;;

esac

if [ "${binary_uri}" != "" ] ; then

    # We're downloading and installing a specific Docker binary.
    # All we need to do is download the TAR binary and extract 
    # it to [/usr/bin].

    curl -fsSLv ${CURL_RETRY} ${binary_uri} -o /tmp/docker.tgz 1>&2
    tar -xvzf /tmp/docker.tgz --directory /tmp
    mv /tmp/docker/* /usr/bin
    rm -rf /tmp/docker
    rm -f /tmp/docker.tgz
fi

#--------------------------------------------------------------------------
# We need to overwrite the Docker systemd unit file with one that has our
# custom Docker options.  We'll save the Docker service file installed by
# the package manager to [~/.save/docker/docker.service].  We may need to
# restore this when  upgrading  Docker in the future.
#
# Note that this file won't be present if we installed from binaries.

if [ -f /lib/systemd/system/docker.service ] ; then

    mkdir -p ${NEON_ARCHIVE_FOLDER}/docker
    cp /lib/systemd/system/docker.service ${NEON_ARCHIVE_FOLDER}/docker/docker.service
fi

cat <<EOF > /lib/systemd/system/docker.service
# Modified from the original installed by Docker to add custom command
# line options generated by [neon.exe].

[Unit]
Description=Docker Application Container Engine
Documentation=https://docs.docker.com
After=network.target
After=
Requires=consul.service
Before=

[Service]
Type=notify
# The default is not to use systemd for cgroups because the delegate issues still
# exists and systemd currently does not support the cgroup feature set required
# for containers run by docker
ExecStart=/usr/bin/dockerd $<docker.options>
ExecReload=/bin/kill -s HUP \$MAINPID
# Having non-zero Limit*s causes performance problems due to accounting overhead
# in the kernel. We recommend using cgroups to do container-local accounting.
LimitNOFILE=infinity
LimitNPROC=infinity
LimitCORE=infinity
# Uncomment TasksMax if your systemd version supports it.
# Only systemd 226 and above support this version.
TasksMax=infinity
TimeoutStartSec=0
# Set delegate yes so that systemd does not reset the cgroups of docker containers
Delegate=yes
# Kill only the docker process, not all processes in the cgroup
KillMode=process

[Install]
WantedBy=multi-user.target
EOF

# Configure Docker to start on boot and then restart it to pick up the new options.

systemctl enable docker
systemctl restart docker

# Indicate that the script has completed.

endsetup setup-docker

#------------------------------------------------------------------------------
# Configures [neon-log-host] containers that will be deployed to every 
# cluster node with the responsibility to receive local log events from the:
#
#       * Node's TD-Agent service which captures journald events
#       * Docker container events forwarded by the Fluentd plugin
#       * Container events transmitted as Syslog packets for containers
#         that don't support Docker logging (like HAProxy).
#
# The agent then adds cluster and node fields to describe the datacenter, 
# environment, node, etc. and then forwards the events on to the cluster 
# [neon-log-collector] log aggregator service.
#
# See the [neon-log-collector] image's [td-agent.conf] configuration file
# for more details.
#
# NOTE: This configuration depends on several environment variables having
#       been loaded from [/etc/neoncloud/env-host] by the container 
#       entrypoint script.
#
# Debugging TD-Agent Configurations
# ---------------------------------
# I've found it best to manually configure one or more TD-Agent instances
# directly on a temporary cluster's node to form a pipeline and then mess
# directly with the configurations there, rather than trying to build and 
# deploy Docker containers.
#
# TD-Agent is not installed on NeonCluster nodes so you should run the
# following commands to install the agent and some relevant plugins:
#
#   docker rm -f neon-log-host
#   curl -L https://toolbelt.treasuredata.com/sh/install-ubuntu-xenial-td-agent2.sh | sh
#   /usr/sbin/td-agent-gem install fluent-plugin-systemd -v 0.0.4 --no-document
#   /usr/sbin/td-agent-gem install fluent-plugin-elasticsearch --no-document
#   /usr/sbin/td-agent-gem install fluent-plugin-record-modifier --no-document
#   mkdir -p /var/neon-log-host
#
# You'll also have to manually patch the configurations to work by tweaking 
# the ports and addresses while debugging and copy any custom plugin Ruby
# scripts to: [/etc/td-agent/plugin/].

<source>    
    @type   forward
    bind    127.0.0.1
    port    24224
</source>

<source>
    @type   syslog
    bind    0.0.0.0

    # Production settings
    port    "#{ENV['NeonHostPorts_LogHostSysLog']}"

    #Debug settings
    #port    5006

    format  none
    tag     syslog
</source>

# Read events from the systemd journal.  Here's the documentation:
#
#   https://github.com/reevoo/fluent-plugin-systemd/blob/master/README.md

<source>
    @type               systemd

    # Production settings
    path                /hostfs/var/log/journal
    pos_file            /hostfs/var/log/neon-log-host/journal.pos

    # Debug settings
    #path                /var/log/journal
    #pos_file            /var/log/neon-log-host/journal.pos

    tag                 systemd
    read_from_head      true
    strip_underscores   true

    # We're going to process events from all systemd units by default
    # but you can uncomment and edit the line below to change this.
    #
    # filters           [{ "_SYSTEMD_UNIT": "docker.service" }, { "_SYSTEMD_UNIT": "consul.service" }]

</source>

# We need to avoid capturing logs from Fluentd/TD-Agent itself to avoid 
# cascading events when there's a problem with the log pipeline.  Operators
# will need to examine the source logs to diagnose these problems.

<match fluent.**>
    @type   null
</match>

# Add Neon cluster and node information to all records.

<filter **>
    @type   record_transformer

    <record>
        cluster         "#{ENV['NEON_CLUSTER']}"
        datacenter      "#{ENV['NEON_DATACENTER']}"
        environment     "#{ENV['NEON_ENVIRONMENT']}"
        node            "#{ENV['NEON_NODE_NAME']}"
        node_dnsname    "#{ENV['NEON_NODE_DNSNAME']}"
        node_ip         "#{ENV['NEON_NODE_IP']}"
        node_role       "#{ENV['NEON_NODE_ROLE']}"
    </record>
</filter>

# Forward all records including all raw fields to the downstream
# [neon-log-collector] service for normalization and storage.

<match **>
    @type               forward
    require_ack_response

    buffer_type         memory
    buffer_chunk_limit  8m      # Maximum bytes for each buffered chuck
    buffer_queue_limit  8       # Maximum number of queued chunks
    flush_interval      1s
    retry_wait          1s
    max_retry_wait      10s
    num_threads         2
    disable_retry_limit true

    # Note that the [neon-log-collector] service can be reached via
    # the cluster's private proxy via the TCP route on 
    # NeonHostPorts_ProxyPrivateTcpLogCollector].
    #
    # Note that we need to use a TCP heartbeat because the proxy
    # can't route UDP packets.

    heartbeat_type      tcp

    <server>
        name    neon-log-collector

        # Production settings
        host    127.0.0.1
        port    "#{ENV['NeonHostPorts_ProxyPrivateTcpLogCollector']}"

        # Debug settings
        #host    127.0.0.2
        #port    24224
    </server>
</match>
